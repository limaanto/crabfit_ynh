#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

# Settings are automatically loaded as bash variables
# in every app script context, therefore typically these will exist:
# - $domain
# - $path
# - $language
# - $install_dir
# - $port
# ...

# In the context of upgrade,
# - resources are automatically provisioned / updated / deleted (depending on existing resources)
# - a safety backup is automatically created by the core and will be restored if the upgrade fails

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
#ynh_script_progression --message="Ensuring downward compatibility..." --weight=1

#
# N.B. : the followings setting migrations snippets are provided as *EXAMPLES*
# of what you may want to do in some cases (e.g. a setting was not defined on
# some legacy installs and you therefore want to initiaze stuff during upgrade)
#

# If db_name doesn't exist, create it
#if [ -z "$db_name" ]; then
#	db_name=$(ynh_sanitize_dbid --db_name=$app)
#	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
#fi

# If install_dir doesn't exist, create it
#if [ -z "$install_dir" ]; then
#	install_dir=/var/www/$app
#	ynh_app_setting_set --app=$app --key=install_dir --value=$install_dir
#fi

#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..." --weight=1

ynh_systemd_action --service_name="${app}-front" --action="stop" --log_path="/var/log/$app/${app}-front"
ynh_systemd_action --service_name="${app}-back" --action="stop" --log_path="/var/log/$app/${app}-back"

#=================================================
# "REBUILD" THE APP (DEPLOY NEW SOURCES, RERUN NPM BUILD...)
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --weight=1

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir"
	chown -R $app:$app "$install_dir"
	chmod -R o-rwx "$install_dir"

fi

ynh_install_nodejs --nodejs_version=$nodejs_version
ynh_use_nodejs

#=================================================
# REAPPLY SYSTEM CONFIGURATIONS
#=================================================
ynh_script_progression --message="Upgrading system configurations related to $app..." --weight=1

# This should be a literal copypasta of what happened in the install's "System configuration" section

# Create a dedicated NGINX config using the conf/nginx.conf template
ynh_add_nginx_config

# Create a dedicated systemd config
ynh_add_config --template="../conf/crabfit.target" --destination="/etc/systemd/system/$app.target"
ynh_add_systemd_config --service="${app}-front" --template="crabfit-front.service"
ynh_add_systemd_config --service="${app}-back" --template="crabfit-back.service"

yunohost service add "${app}-front" --description="Crabfit NodeJS Frontend" --log="/var/log/$app/${app}-front.log"
yunohost service add "${app}-back" --description="Crabfit Rust Backend" --log="/var/log/$app/${app}-back.log"

ynh_use_logrotate

#=================================================
# RECONFIGURE THE APP (UPDATE CONF, APPLY MIGRATIONS...)
#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..." --weight=1

### Same as during install
###
### The file will automatically be backed-up if it's found to be manually modified (because
### ynh_add_config keeps track of the file's checksum)

# Replace the default .env.local with our own
rm $install_dir/frontend/.env.local
ynh_add_config --template="../conf/front.env" --destination="$install_dir/frontend/.env.local"
chmod 400 "$install_dir/frontend/.env.local"
chown $app:$app "$install_dir/frontend/.env.local"

ynh_add_config --template="../conf/back.env" --destination="$install_dir/api/.env"
chmod 400 "$install_dir/api/.env"
chown $app:$app "$install_dir/api/.env"

### For more complex cases where you want to replace stuff using regexes,
### you shoud rely on ynh_replace_string (which is basically a wrapper for sed)
### When doing so, you also need to manually call ynh_store_file_checksum
###
### ynh_replace_string --match_string="match_string" --replace_string="replace_string" --target_file="$install_dir/some_config_file"
### ynh_store_file_checksum --file="$install_dir/some_config_file"

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	#=================================================
	# BUILD BACKEND
	#=================================================
	ynh_script_progression --message="Building crabfit backend..." --weight=10
	build_backend

	#=================================================
	# BUILD FRONTEND
	#=================================================
	ynh_script_progression --message="Building crabfit frontend..." --weight=2
	build_frontend
fi

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..." --weight=1

ynh_systemd_action --service_name="${app}-front" --action="start" --log_path="/var/log/$app/${app}-front.log"
ynh_systemd_action --service_name="${app}-back" --action="start" --log_path="/var/log/$app/${app}-back.log"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed" --last
